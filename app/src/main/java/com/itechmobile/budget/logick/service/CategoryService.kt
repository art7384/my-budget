package com.itechmobile.budget.logick.service

import com.itechmobile.budget.logick.datebase.–°ategoryTableOperation
import com.itechmobile.budget.logick.persisten.UserPersisten
import com.itechmobile.budget.model.CategoryModel

/**
 * Created by artem on 17.11.17.
 */
class CategoryService private constructor() {

    private object Holder {
        val INSTANCE = CategoryService()
    }

    companion object {
        private val LOG_TAG = "CategoryService"
        val INSTANCE: CategoryService by lazy { Holder.INSTANCE }

    }

    var category: CategoryModel
        get() = –°ategoryTableOperation.get(UserPersisten.categoryId)
        set(value) {
            UserPersisten.categoryId = value.id
        }

    val categoryEmojis: Array<String>
    get() {
        val emojis = ArrayList<String>()
        val arr = visibleCategorys
        arr.mapTo(emojis) { it.icoName }
        return emojis.toTypedArray()
    }

    val expenseCategory: CategoryModel
        get() {
            if (category.isIncome) category = –°ategoryTableOperation.getAll(false)[0]
            return category
        }

    val incomeCategory: CategoryModel
        get() {
            if (!category.isIncome) category = –°ategoryTableOperation.getAll(true)[0]
            return category
        }

    val visibleCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getVisible() //arr.add(CategoryModel("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "‚ûï", true))

    val visibleExpenseCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getVisible(false)

    val visibleIncomeCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getVisible(true)

    val allCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getAll() //arr.add(CategoryModel("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "‚ûï", true))

    val allExpenseCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getAll(false)

    val allIncomeCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getAll(true)

    init {
        if (–°ategoryTableOperation.getAll(false).size < 1) {
            –°ategoryTableOperation.add(CategoryModel("–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", "\uD83D\uDCB8", false))//üí∏
            –°ategoryTableOperation.add(CategoryModel("–ü—Ä–æ–¥—É–∫—Ç—ã", "\uD83C\uDF56", false))//üçñ
            –°ategoryTableOperation.add(CategoryModel("–î–æ–º", "\uD83C\uDFE0", false))//üè†
            –°ategoryTableOperation.add(CategoryModel("–ê–≤—Ç–æ", "\uD83D\uDE97", false))//üöó
            –°ategoryTableOperation.add(CategoryModel("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "\uD83C\uDFB3", false))//üé≥
        }
        if (–°ategoryTableOperation.getAll(true).size < 1) {
            –°ategoryTableOperation.add(CategoryModel("–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã", "\uD83C\uDF81", true))//üéÅ
            –°ategoryTableOperation.add(CategoryModel("–ó–∞—Ä–æ–±–æ—Ç–æ–∫", "\uD83D\uDCB5", true))//üí∞
        }
        category = –°ategoryTableOperation.getAll()[0]
    }

    fun get(id: Long): CategoryModel {
        category = –°ategoryTableOperation.get(id)
        return category
    }

    fun add(categoryModel: CategoryModel){
        –°ategoryTableOperation.add(categoryModel)
    }

    fun update(categoryModel: CategoryModel){
        –°ategoryTableOperation.update(categoryModel)
    }

    /**
     * <p>"–£–¥–∞–ª–µ–Ω–∏–µ" –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
     * <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∫—Ä—ã—Ç–æ–π, –¥–ª—è –¥–æ–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
     */
    fun dell(id: Long){
        val model = get(id)
        model.isVisible = false
        update(model)
    }

}
