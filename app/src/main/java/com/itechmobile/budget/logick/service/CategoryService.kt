package com.itechmobile.budget.logick.service

import com.itechmobile.budget.logick.datebase.TransactionTableOperation
import com.itechmobile.budget.logick.datebase.–°ategoryTableOperation
import com.itechmobile.budget.model.CategoryModel

/**
 * Created by artem on 17.11.17.
 */
class CategoryService private constructor() {

    private object Holder {
        val INSTANCE = CategoryService()
    }

    companion object {
        private val LOG_TAG = "CategoryService"
        val INSTANCE: CategoryService by lazy { Holder.INSTANCE }

    }

    val visibleCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.get() //arr.save(CategoryModel("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "‚ûï", true))

    val visibleExpenseCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.get(false)

    val visibleIncomeCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.get(true)

    val allCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getAll() //arr.save(CategoryModel("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "‚ûï", true))

    val allExpenseCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getAll(false)

    val allIncomeCategorys: ArrayList<CategoryModel>
        get() = –°ategoryTableOperation.getAll(true)

    init {
        if (–°ategoryTableOperation.getAll(false).size < 1) {
            –°ategoryTableOperation.add(CategoryModel("–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", "\uD83D\uDCB8", false))//üí∏
            –°ategoryTableOperation.add(CategoryModel("–ü—Ä–æ–¥—É–∫—Ç—ã", "\uD83C\uDF56", false))//üçñ
            –°ategoryTableOperation.add(CategoryModel("–î–æ–º", "\uD83C\uDFE0", false))//üè†
            –°ategoryTableOperation.add(CategoryModel("–ê–≤—Ç–æ", "\uD83D\uDE97", false))//üöó
            –°ategoryTableOperation.add(CategoryModel("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "\uD83C\uDFB3", false))//üé≥
        }
        if (–°ategoryTableOperation.getAll(true).size < 1) {
            –°ategoryTableOperation.add(CategoryModel("–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã", "\uD83D\uDCB5Ô∏è", true))//üíµÔ∏è
            –°ategoryTableOperation.add(CategoryModel("–ó–∞—Ä–æ–±–æ—Ç–æ–∫", "\uD83D\uDCB5", true))//üí∞
        }
        //category = –°ategoryTableOperation.getAll()[0]
    }

    fun get(id: Long): CategoryModel = –°ategoryTableOperation.get(id)?: CategoryModel("???", "\uD83D\uDC7B", true)//üëª

    fun save(categoryModel: CategoryModel): Long = –°ategoryTableOperation.add(categoryModel)

    fun update(categoryModel: CategoryModel) = –°ategoryTableOperation.update(categoryModel)

    /**
     * <p>"–£–¥–∞–ª–µ–Ω–∏–µ" –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
     * <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –µ—Å–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Ç–æ —É–¥–∞–ª—è–µ–º,
     * –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ "isDell"=true</p>
     */
    fun dell(id: Long) {
        val model = get(id) ?: return
        if (TransactionTableOperation.getForCategorySize(id) > 0) {
            model.isDell = true
            –°ategoryTableOperation.update(model)
        } else {
            –°ategoryTableOperation.dell(id)
        }
    }

}
